// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[3..5], a=a0, b=a1, c=a2, d=a3, e=a4, f=a5, g=a6, h=a7);
    RAM8(in=in, load=a0, address=address[0..2], out=d0);
    RAM8(in=in, load=a1, address=address[0..2], out=d1);
    RAM8(in=in, load=a2, address=address[0..2], out=d2);
    RAM8(in=in, load=a3, address=address[0..2], out=d3);
    RAM8(in=in, load=a4, address=address[0..2], out=d4);
    RAM8(in=in, load=a5, address=address[0..2], out=d5);
    RAM8(in=in, load=a6, address=address[0..2], out=d6);
    RAM8(in=in, load=a7, address=address[0..2], out=d7);
    Mux8Way16(a=d0, b=d1, c=d2, d=d3, e=d4, f=d5, g=d6, h=d7, sel=address[3..5], out=out);
}
